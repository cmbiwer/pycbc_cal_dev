#! /usr/bin/python

# Copyright (C) 2014 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generals
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import numpy as np
import sqlite3
import sys

from glue.ligolw import dbtables

# initializations
filename_db = 'test.db'
filename_tmpltbank = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/bank/H1L1-BANK2HDF-966384015-1000000.hdf'
filenames_sngl = ['/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf',
                  '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/L1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf']
filename_coinc = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1L1-STATMAP_FULL_DATA_FULL_12H-966384015-1000000.hdf'
filenames_inj = ['']
filenames_segments = ''
filenames_vetoes  = ['']

def sqlite_create_table(table):
    """
    Returns a string with the SQLite command to create
    the LIGOLW table in the database.
    """

    # get table name and columns
    table_name   = table.tableName.replace(':table', '')
    validcolumns = table.validcolumns

    # put columns in a list of tuples where the first element is
    # the column name and the second element is the column type
    columns = []
    for col_name,col_type in validcolumns.iteritems():
        if col_type in ['int_4s', 'int_4u']:
            col_type = 'INTEGER'
        elif col_type in ['real_4', 'real_8']:
            col_type = 'REAL'
        elif col_type in ['ilwd:char', 'lstring', 'char_v']:
            col_type = 'TEXT'
        else:
            logging.info('Unknown column type of '+col_type+' for '+col_name+'.')
            sys.exit()
        columns.append( (col_name, col_type) )

    # construct the SQLite query string
    sqlquery = """
    CREATE TABLE %s(%s);
    """%(table_name, ', '.join([col_name+' '+col_type for col_name,col_type in columns]))

    return sqlquery

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_convert_hdf5_sqlite [--options]',
                  description="Read HDF5 files with inspiral, coincidence, \
                  and injection data to produce a sqlite database that obeys \
                  the LIGO schema.")
opts = parser.parse_args()

# create log
logging_level = logging.DEBUG
logging.basicConfig(format='%(asctime)s : %(message)s', level=logging_level)

# create sqlite database
logging.info('Creating database...')
con = sqlite3.connect(filename_db)
cur = con.cursor()

###############################################################################
# coinc_event_map
###############################################################################

# read HDF5 coincidence file
data = h5py.File(filename_coinc, 'r')

# get IFO names
ifo1 = data.attrs['detector_1']
ifo2 = data.attrs['detector_2']

# get IFO single inspiral trigger IDs
num_coinc_trigs = data['foreground']['trigger_id1'].len()
trigger_ids_1 = data['foreground']['trigger_id1'][:]
trigger_ids_2 = data['foreground']['trigger_id2'][:]
data.close()

# key a dict on the column names
tmp = {}
for key in dbtables.lsctables.CoincMapTable.validcolumns.keys():
    tmp[key] = np.array(['' for i in range(num_coinc_trigs)])

# create coinc_event_map table
logging.info('Creating coinc_event_map table...')
sqlquery = sqlite_create_table(dbtables.lsctables.CoincMapTable)
cur.execute(sqlquery)

# construct an array for event_id
tmp['event_id']  = ['sngl_inspiral:event_id:'+ifo1+str(trigger_ids_1[i]) for i in range(num_coinc_trigs)]
tmp['event_id'] += ['sngl_inspiral:event_id:'+ifo2+str(trigger_ids_2[i]) for i in range(num_coinc_trigs)]
tmp['event_id']  = np.array(tmp['event_id'])

# construct an array for table_name and coinc_event_id
tmp['table_name']     = np.array(['sngl_inspiral' for i in range(num_coinc_trigs)])
tmp['coinc_event_id'] = np.array(['coinc_event:coinc_event_id:'+str(i) for i in range(num_coinc_trigs)])

# put column names and column arrays into seperate lists
# that will be used to construct the SQLite command
column_names  = []
column_values = []
for key,val in tmp.iteritems():
    column_names.append(key)
    column_values.append(val)

# insert rows into coinc_map_table
logging.info('Populating coinc_event_map table...')
sqlquery = """
INSERT INTO coinc_event_map(%s) VALUES (?, ?, ?);
"""%', '.join(column_names)
cur.executemany(sqlquery, zip(*column_values))

###############################################################################
# coinc_event
###############################################################################

# create coinc_event table
logging.info('Creating coinc_event table...')
sqlquery = sqlite_create_table(dbtables.lsctables.CoincTable)
cur.execute(sqlquery)

###############################################################################
# coinc_inspiral
###############################################################################

# create coinc_inspiral table
logging.info('Creating coinc_inspiral table...')
sqlquery = sqlite_create_table(dbtables.lsctables.CoincInspiralTable)
cur.execute(sqlquery)

###############################################################################
# sngl_inspiral
###############################################################################

# create sngl_inspiral table
logging.info('Creating sngl_inspiral table...')
sqlquery = sqlite_create_table(dbtables.lsctables.SnglInspiralTable)
cur.execute(sqlquery)

# read HDF5 single inspiral trigger file
data = h5py.File(filenames_sngl[0], 'r')



#cont_chisq REAL, bank_chisq REAL, chisq_dof INTEGER, end_time_gmst REAL, event_duration REAL, chisq REAL, spin1y REAL, spin1x REAL, alpha REAL, coa_phase REAL, alpha2 REAL, mchirp REAL, alpha1 REAL, alpha6 REAL, alpha4 REAL, alpha5 REAL, event_id TEXT, chi REAL, cont_chisq_dof INTEGER, spin2y REAL, tau2 REAL, tau3 REAL, tau0 REAL, tau4 REAL, tau5 REAL, template_duration REAL, impulse_time INTEGER, impulse_time_ns INTEGER, rsqveto_duration REAL, channel TEXT, mtotal REAL, alpha3 REAL, spin1z REAL, Gamma5 REAL, spin2x REAL, f_final REAL, beta REAL, process_id TEXT, snr REAL, bank_chisq_dof INTEGER, kappa REAL, eff_distance REAL, Gamma7 REAL, Gamma6 REAL, search TEXT, Gamma4 REAL, mass1 REAL, Gamma2 REAL, Gamma1 REAL, mass2 REAL, ttotal REAL, Gamma0 REAL, spin2z REAL, Gamma9 REAL, Gamma8 REAL, Gamma3 REAL, eta REAL, psi0 REAL, end_time INTEGER, amplitude REAL, psi3 REAL, end_time_ns INTEGER, ifo TEXT, sigmasq REAL

# save database and exit
logging.info('Done.')
con.commit()
con.close()
sys.exit()




#########################################

# Some notes:

# Need these tables:
#coinc_definer       experiment_map      search_summary      sim_inspiral      
#coinc_event         experiment_summary  search_summvars     sngl_inspiral     
#coinc_event_map     filter              segment             summ_value        
#coinc_inspiral      process             segment_definer     time_slide        
#experiment          process_params      segment_summary     veto_definer    

