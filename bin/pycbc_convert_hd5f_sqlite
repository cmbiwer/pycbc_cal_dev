#! /usr/bin/python

# Copyright (C) 2014 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generals
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import sqlite3
import sys

from glue.ligolw import dbtables

# initializations
filename_db = 'test.db'
filename_tmpltbank = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/bank/H1L1-BANK2HDF-966384015-1000000.hdf'
filenames_sngl = ['/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf',
                  '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/L1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf']
filename_coinc = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1L1-STATMAP_FULL_DATA_FULL_12H-966384015-1000000.hdf'
filenames_inj = ['']
filenames_segments = ''
filenames_vetoes  = ['']

def sqlite_create_table(table):
    """
    Returns a string with the SQLite command to create
    the LIGOLW table in the database.
    """

    table_name   = table.tableName.replace(':table', '')
    validcolumns = table.validcolumns

    columns = []
    for col_name,col_type in validcolumns.iteritems():
        if col_type is 'int_4s':
            col_type = 'INTEGER'
        elif col_type in ['real_4', 'real_8']:
            col_type = 'REAL'
        elif col_type in ['ilwd:char', 'lstring', 'char_v']:
            col_type = 'TEXT'
        else:
            logging.info('Unknown column type of '+col_type+' for '+col_name+'.')
            sys.exit()
        columns.append( (col_name, col_type) )

    sqlquery = """
    CREATE TABLE %s(%s);
    """%(table_name, ','.join([col_name+' '+col_type for col_name,col_type in columns]))

    return sqlquery

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_convert_hdf5_sqlite [--options]',
                  description="Read HDF5 files with inspiral, coincidence, \
                  and injection data to produce a sqlite database that obeys \
                  the LIGO schema.")
opts = parser.parse_args()

# create log
logging_level = logging.DEBUG
logging.basicConfig(format='%(asctime)s : %(message)s', level=logging_level)

# create sqlite database
logging.info('Creating database...')
con = sqlite3.connect(filename_db)
cur = con.cursor()

###############################################################################
# coinc_event_map
###############################################################################

# read HDF5 coincidence file
data = h5py.File(filename_coinc, 'r')

# get IFO names
ifo1 = data.attrs['detector_1']
ifo2 = data.attrs['detector_2']

# get IFO single inspiral trigger IDs
trigger_ids_1 = data['foreground']['trigger_id1'][:]
trigger_ids_2 = data['foreground']['trigger_id2'][:]

# create coinc_event_map table
logging.info('Creating coinc_event_map table...')
sqlquery = sqlite_create_table(dbtables.lsctables.CoincMapTable)
cur.execute(sqlquery)

# loop over size of arrays
logging.info('Populating coinc_event_map table...')
for i in range(data['foreground']['trigger_id1'].len()):

    # loop over detectors
    for trigger_ids in [trigger_ids_1, trigger_ids_2]:

        # create dict of values to insert
        args = {'event_id'       : 'sngl_inspiral:event_id:'+str(trigger_ids[i]),
                'table_name'     : 'sngl_inspiral',
                'coinc_event_id' : 'coinc_event:coinc_event_id:'+str(i),
        }

        # append row to table for each single IFO trigger
        # that was found in coincidence
        sqlquery = """
        INSERT INTO coinc_event_map VALUES ("{event_id}", "{table_name}", "{coinc_event_id}");
        """.format(**args)
        cur.execute(sqlquery)

###############################################################################
# sngl_inspiral
###############################################################################

# create sngl_inspiral table
logging.info('Creating sngl_inspiral table...')
sqlquery = sqlite_create_table(dbtables.lsctables.SnglInspiralTable)
cur.execute(sqlquery)

# save database and exit
logging.info('Done.')
con.commit()
con.close()
sys.exit()




#########################################

# Some notes:

# Need these tables:
#coinc_definer       experiment_map      search_summary      sim_inspiral      
#coinc_event         experiment_summary  search_summvars     sngl_inspiral     
#coinc_event_map     filter              segment             summ_value        
#coinc_inspiral      process             segment_definer     time_slide        
#experiment          process_params      segment_summary     veto_definer    

