#! /usr/bin/python

# Copyright (C) 2014 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generals
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import h5py
import logging
import sqlite3
import sys

import sqlite_utils

# parse command line
parser = argparse.ArgumentParser(usage='pycbc_convert_hdf5_sqlite [--options]',
                  description="Read HDF5 files with inspiral, coincidence, \
                  and injection data to produce a sqlite database that obeys \
                  the LIGO schema.")
opts = parser.parse_args()

# initializations
filename_db = 'test.db'
filename_tmpltbank = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/bank/H1L1-BANK2HDF-966384015-1000000.hdf'
filenames_sngl = ['/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf',
                  '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/L1-HDF_TRIGGER_MERGE_FULL_DATA-966384015-1000000.hdf']
filename_coinc = '/home/ahnitz/projects/BNS/snrthreshold/mdc/ns/SNR_5.0/full_data/H1L1-STATMAP_FULL_DATA_FULL_12H-966384015-1000000.hdf'
filenames_inj = ['']
filenames_segments = ''
filenames_vetoes  = ['']

# create sqlite database
logging.info('Creating database...')
con = sqlite3.connect(filename_db)
cur = con.cursor()

# read HDF5 coincidence file
data = h5py.File(filename_coinc, 'r')

# get IFO names
ifo1 = data.attrs['detector_1']
ifo2 = data.attrs['detector_2']

# get IFO single inspiral trigger IDs
trigger_ids_1 = data['foreground']['trigger_id1'][:]
trigger_ids_2 = data['foreground']['trigger_id2'][:]

# create coinc_event_map table
logging.info('Creating coinc_event_map table...')
sqlquery = """
CREATE TABLE coinc_event_map(event_id TEXT, table_name TEXT, coinc_event_id TEXT);
"""
cur.execute(sqlquery)

# loop over size of arrays
logging.info('Populating coinc_event_map table...')
print dir(data['foreground']['trigger_id1'])
for i in range(data['foreground']['trigger_id1'].len()):

    # loop over detectors
    for trigger_ids in [trigger_ids_1, trigger_ids_2]:

        # create dict of values to insert
        args = {'event_id'       : 'sngl_inspiral:event_id:'+str(trigger_ids[i]),
                'table_name'     : 'sngl_inspiral',
                'coinc_event_id' : 'coinc_event:coinc_event_id:'+str(i),
        }

        # append row to table for each single IFO trigger
        # that was found in coincidence
        sqlquery = """
        INSERT INTO coinc_event_map VALUES ("{event_id}", "{table_name}", "{coinc_event_id}");
        """.format(**args)
        cur.execute(sqlquery)


# save database and exit
con.commit()
con.close()
sys.exit()




#########################################

# Some notes:

# Need these tables:
#coinc_definer       experiment_map      search_summary      sim_inspiral      
#coinc_event         experiment_summary  search_summvars     sngl_inspiral     
#coinc_event_map     filter              segment             summ_value        
#coinc_inspiral      process             segment_definer     time_slide        
#experiment          process_params      segment_summary     veto_definer    

# sngl inspiral columns
"""
0|cont_chisq|REAL|0||0
1|bank_chisq|REAL|0||0
2|chisq_dof|INTEGER|0||0
3|end_time_gmst|REAL|0||0
4|event_duration|REAL|0||0
5|chisq|REAL|0||0
6|spin1y|REAL|0||0
7|spin1x|REAL|0||0
8|alpha|REAL|0||0
9|coa_phase|REAL|0||0
10|alpha2|REAL|0||0
11|mchirp|REAL|0||0
12|alpha1|REAL|0||0
13|alpha6|REAL|0||0
14|alpha4|REAL|0||0
15|alpha5|REAL|0||0
16|event_id|TEXT|0||1
17|chi|REAL|0||0
18|cont_chisq_dof|INTEGER|0||0
19|spin2y|REAL|0||0
20|tau2|REAL|0||0
21|tau3|REAL|0||0
22|tau0|REAL|0||0
23|tau4|REAL|0||0
24|tau5|REAL|0||0
25|template_duration|REAL|0||0
26|impulse_time|INTEGER|0||0
27|impulse_time_ns|INTEGER|0||0
28|rsqveto_duration|REAL|0||0
29|channel|TEXT|0||0
30|mtotal|REAL|0||0
G31|alpha3|REAL|0||0
32|spin1z|REAL|0||0
33|Gamma5|REAL|0||0
34|spin2x|REAL|0||0
35|f_final|REAL|0||0
36|beta|REAL|0||0
37|process_id|TEXT|0||0
38|snr|REAL|0||0
39|bank_chisq_dof|INTEGER|0||0
40|kappa|REAL|0||0
41|eff_distance|REAL|0||0
42|Gamma7|REAL|0||0
43|Gamma6|REAL|0||0
44|search|TEXT|0||0
45|Gamma4|REAL|0||0
46|mass1|REAL|0||0
47|Gamma2|REAL|0||0
48|Gamma1|REAL|0||0
49|mass2|REAL|0||0
50|ttotal|REAL|0||0
51|Gamma0|REAL|0||0
52|spin2z|REAL|0||0
53|Gamma9|REAL|0||0
54|Gamma8|REAL|0||0
55|Gamma3|REAL|0||0
56|eta|REAL|0||0
57|psi0|REAL|0||0
58|end_time|INTEGER|0||0
59|amplitude|REAL|0||0
60|psi3|REAL|0||0
61|end_time_ns|INTEGER|0||0
62|ifo|TEXT|0||0
63|sigmasq|REAL|0||0
"""
